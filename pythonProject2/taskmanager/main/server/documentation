Для того, чтобы использвать нижеописанные функции подключите файл "main_DB_modul.py"


1)
функция 
add_new_div(div) 

- добавляет новый дивизион в БД (для кнопки добавить дивизион)
- примимает параметр:

class New_div:
	def __init__(self, name, year):
		self.name = name
		self.year = year

- ничего не возвращает 

Пример вызова:

div = New_div("test_div", "2020")
add_new_div(div)


2) 

функция 
add_new_pupil(pupil)

- Добавляет нового ученика в БД (при регистрации ученика)
- приминает параметр:

class New_pupil:
	def __init__(self, surname, name, patronymic, school, grade, nick_CF, birthday):
		self.surname = surname
		self.name = name
		self.patronymic = patronymic

		self.school = school
		self.grade = grade
		self.nick_CF = nick_CF
		self.birthday = birthday

- ничего не возвращает

Пример вызова:

pupil = New_pupil("test_Sob", "test_Nat", "test_Nik", "school 666", "10", "TEST_CF", "2001-05-15")
add_new_pupil(pupil)


3) 

функция

get_all_pupils()

- не принимает параметров
- возвращает массив картежей в отсортированном алфавитном порядке по именам учеников.
кортеж вида: (фамилия,  имя, отчество, ник_СF, название_дивизиона, id_ученика, id_дивизиона)

первые 5 параметра отражаются в web-приложении.
id ученика и дивизиона нужны для однозначности при смене дивизиона у ученика.

Если "id_дивизиона" = 1 и\или "название_дивизиона" = 'NULL', значит ученик не пренадлежит ни одному дивизиону.

Пример вызова:

pupils = get_all_pupils()

for [surname, name, patronymic, cf, div_name, pupil_id, div_id] in pupils:
		print(surname, name, patronymic, cf, div_name, pupil_id, div_id)


4)

функция

get_all_divs()

- не принимает параметров
- возвращает массив картежей в отсортированном алфавитном порядке по названию дивизиона.
кортеж вида: (название_дивизиона, id_дивизиона)

первый  параметр отражаются в web-приложении.
id дивизиона нужно для однозначности при смене дивизиона у ученика.

Если id_дивизиона = 1 и\или имеет название = 'NULL', значит ученик не пренадлежит ни одному дивизиону.

Пример вызова:

divs = get_all_divs()

for [name, _id] in divs:
		print(name, _id)	


5) 
функция

change_pupil_div(p_div)

- Обновляет дивизион ученика (работает при выборе дива из выпадающего списка в окне "список учеников")

- принимает параметр:

class pupil_div:
	def __init__(self, pupil_id, div_id):
		self.pupil_id = pupil_id
		self.div_id = div_id

- ничего не возвращает

Пример вызова:

ch = pupil_div("1", "1")
change_pupil_div(ch)

6)

delete_div(div_id)

- меняет дивизион учеников, которые умеют удаляемый дивизион, на" див не выбран". Удаляет дивизион.

- Примимает парамерт: (строка) id дивизиона.

- ничего не возвращает

Пример вызова:

div_id = '2'
delete_div(div_id)

7)

функция 

add_contest(contest)

- добавляет в БД: информацию о новом контесте, инфу о всех задачах добавленного контеста, инфу обо всех посылках из положения команд только для зарегистрированных учеников.

- принимает параметр

class contest:
	def __init__(self, name, link, div_id, tasks, pupils_tasks):
		self.name = name
		self.link = link
		self.div_id = div_id
		self.tasks = tasks
		self.pupils_tasks = pupils_tasks

где параметр tasks - массив классов

class task:
	def __init__(self, letter, name):
		self.letter = letter
		self.name = name

а параметр pupils_tasks - массив классов 

class pupil_task:
	def __init__(self, pupil_CF, task_letter, cnt_try, result):
		self.pupil_CF = pupil_CF
		self.task_letter = task_letter
		self.cnt_try = cnt_try
		self.result = result

- ничего не возвращает

Пример вызова:

tasks = []
t1 = task('A', "Aaa")
t2 = task('B', "Bbb")
t3 = task('C', "Ccc")

tasks.append(t1)
tasks.append(t2)
tasks.append(t3)

pup_task = []
pt1 = pupil_task('CF_Nat', 'A', '5', '+')
pt2 = pupil_task('CF_Nat', 'B', '1', '-')
pt3 = pupil_task('CF_Dan', 'A', '90', '-')

pup_task.append(pt1)
pup_task.append(pt2)
pup_task.append(pt3)


con = contest("Traning", "link_CF", '2', tasks, pup_task)

add_contest(con)


8)
функция 

get_all_contests()

- ничего не принимает
- возвращает массив кортежей отсортированный по Id дивизиона.
- кортеж вида: (название_контеста, Id_контеста, Id_дивизиона)
первый параметр отражается в web-приложении.


Пример вызова:

contests = get_all_contests()

for [name, contest_id, div_id] in contests:
		print(name, contest_id, div_id)


9)

функция 

get_status_on_pupils_contests(pupils, contests)

- статистика по людям и контестам

- принимает 2 параметра:
pupils - массив id_учеников
contests - массив id_контестов


- возвращает словарь(dist), где ключ - кортеж вида (id_ученика, id_контеста), а значение - строка вида "3/5" - количество задач сданных челом из всех задач контеста или "-", если этот контест ученику не доступен.

Пример вызова:

pupil_id1 = '1'
pupil_id2 = '2'

pupils = []
pupils.append(pupil_id1)
pupils.append(pupil_id2)


contest_id1 = '1'
contest_id2 = '2'

contests = []
contests.append(contest_id1)
contests.append(contest_id2)


status = get_status_on_pupils_contests(pupils, contests)

for con_id in contests:
	print('%-7s' % con_id,  end=' ')
print()

for pup_id in pupils:
	for con_id in contests:
		print('%-7s' % status[(pup_id, con_id)], end=' ')
	print()

	














