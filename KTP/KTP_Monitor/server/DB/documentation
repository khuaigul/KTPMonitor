Для того, чтобы использвать нижеописанные функции подключите файл "main_DB_modul.py"
Поля классов, которые используются в нижеописанных функциях можно посмотреть в файле models.py


Написать:

- редактирование профила ученика
- редактирование профила препода
- вывести контесты конкретных дивов



Протестировать:

- вывести все контесты относящиеся к дивам (get_all_contests)


Протестированно:

- добавление ученика (add_new_pupil)
- добавление препода (add_new_teacher)
- добавление дива (add_new_div)
- добавление контеста (add_contest)
- добавление задач в контест (add_task)
- вывод учеников по дивам (get_all_pupil)
- вывести все дивы (get_all_divs)
- добавление новой посылки (add_new_send)
- изменение дивизиона ученика (change_pupil_div)
- удаление дивизиона (delete_div)

Актуально:
1) Получить все дивизионы.

get_all_divs()

- не принимает параметров
- возвращает лист объектов модели(экземпляров класса) Div_Info в отсортированном алфавитном порядке по названию дивизиона.

it.name отражаются в web-приложении.
it.id дивизиона нужно для однозначности при смене дивизиона у ученика.

Пример вызова:

divs = get_all_divs()
for it in divs:
    print(it.name)

2) Добавить ученика в базу данных

add_new_pupil(user, lastname, firstname, secondname, CF, birthday, school, grade, phone)

- приминает параметры: объект модели User, которому будут соответствовать записанные данные, ФИО(3 аргумента), ник кф, 
	дата рождения в формате "yyyy.mm.dd", школа, класс, номер тлф
-ничего не возвращает

Пример вызова:

add_new_pupil(user, "lastname", "firstname", "secondname", "CF", "2002.04.15", "школа 34", 10, "79112342323")

3) Добавить преподавателя в базу данных

add_new_teacher(user, lastname, firstname, secondname, CF, phone):

- приминает параметры: объект модели User, которому будут соответствовать записанные данные, ФИО(3 аргумента), ник кф, номер тлф
- ничего не возвращает

Пример вызова:

add_new_pupil(user, "lastname", "firstname", "secondname", "CF", "79112342323")



4) Добавляет новый дивизион в БД 
add_new_div(name) 

- добавляет новый дивизион в БД (для кнопки добавить дивизион)
- принимает параметр: имя дивизиона
- возвращает True, если объект создан или False, если дивизион с таким именем уже существует

Пример вимызова:

add_new_div("div A")


5) Вывод учеников относящихся к выбранным дивизионам

get_all_pupils(divs)


- принимает лист объектов модели Div_Info. 
- если нужны все дивизиона, то параметр не указывается
- возвращает лист объектов модели Pupil_Info.

Пример вызова:

divs = [{экзеспляр класса Div_Info}, {экзеспляр класса Div_Info}]
pupils = get_all_pupils(divs)


6) Изменить дивизион ученика

change_pupil_div(pupil, div)

- принимает параметры: экземпляр класса Pupil_Info, экземпляр класса Div_Info
- ничего не возвращает


7) Удалить дивизион

delete_div(div)

- Удаляет дивизион.
- Примимает парамерт: экземпляр класса Div_Info
- ничего не возвращает

Пример вызова:

delete_div(div)

8) Добавить контест в БД (без задач)

add_contest(name, link, divs)

- Добавляет контест в БД (без задач).
- Примимает параметры: название контеста, ссылка на контест, лист экземпляров класса Div_Info (дивы к которым относится контест)
- ничего не возвращает

9) Добавить задачи в контест

add_task(link, letter, name)

- Добавляет задачи в контест в БД.
- Примимает параметры: ссылка на контест, буква задачм, название задачи
- ничего не возвращает 

10) Добавить новую посылк(у/и) для ученика и задачи

add_new_send(link, letter, cf, cnt_try, result)

- Добавляет информацию о посылках ученика по задаче в БД
- Примимает параметры: ссылка на контест, буква задачи, никмейм ученика, кол-во попыток, вердикт
- ничего не возвращает 


11) Вывод контестов относящихся к выбранным дивизионам

get_all_contests(divs)

- принимает лист объектов модели Div_Info. 
- если нужны все дивизионы, то параметр не указывается
- возвращает лист объектов модели Contest_Info.

Пример вызова:

divs = [{экзеспляр класса Div_Info}, {экзеспляр класса Div_Info}]
contests = get_all_contests(divs)





Неактуально:
3) 

функция 

add_contest(contest)

- добавляет в БД: информацию о новом контесте, инфу о всех задачах добавленного контеста, инфу обо всех посылках из положения команд только для зарегистрированных учеников.

- принимает параметр

class contest:
	def __init__(self, name, link, div_id, tasks, pupils_tasks):
		self.name = name
		self.link = link
		self.div_id = div_id
		self.tasks = tasks
		self.pupils_tasks = pupils_tasks

где параметр tasks - массив классов

class task:
	def __init__(self, letter, name):
		self.letter = letter
		self.name = name

а параметр pupils_tasks - массив классов 

class pupil_task:
	def __init__(self, pupil_CF, task_letter, cnt_try, result):
		self.pupil_CF = pupil_CF
		self.task_letter = task_letter
		self.cnt_try = cnt_try
		self.result = result

- ничего не возвращает

Пример вызова:

tasks = []
t1 = task('A', "Aaa")
t2 = task('B', "Bbb")
t3 = task('C', "Ccc")

tasks.append(t1)
tasks.append(t2)
tasks.append(t3)

pup_task = []
pt1 = pupil_task('CF_Nat', 'A', '5', '+')
pt2 = pupil_task('CF_Nat', 'B', '1', '-')
pt3 = pupil_task('CF_Dan', 'A', '90', '-')

pup_task.append(pt1)
pup_task.append(pt2)
pup_task.append(pt3)


con = contest("Traning", "link_CF", '2', tasks, pup_task)

add_contest(con)


8)
функция 

get_all_contests()

- ничего не принимает
- возвращает массив кортежей отсортированный по Id дивизиона.
- кортеж вида: (название_контеста, Id_контеста, Id_дивизиона)
первый параметр отражается в web-приложении.


Пример вызова:

contests = get_all_contests()

for [name, contest_id, div_id] in contests:
		print(name, contest_id, div_id)


9)

функция 

get_status_on_pupils_contests(pupils, contests)

- статистика по людям и контестам

- принимает 2 параметра:
pupils - массив id_учеников
contests - массив id_контестов


- возвращает словарь(dist), где ключ - кортеж вида (id_ученика, id_контеста), а значение - строка вида "3/5" - количество задач сданных челом из всех задач контеста или "-", если этот контест ученику не доступен.

Пример вызова:

pupil_id1 = '1'
pupil_id2 = '2'

pupils = []
pupils.append(pupil_id1)
pupils.append(pupil_id2)


contest_id1 = '1'
contest_id2 = '2'

contests = []
contests.append(contest_id1)
contests.append(contest_id2)


status = get_status_on_pupils_contests(pupils, contests)

for con_id in contests:
	print('%-7s' % con_id,  end=' ')
print()

for pup_id in pupils:
	for con_id in contests:
		print('%-7s' % status[(pup_id, con_id)], end=' ')
	print()

	














