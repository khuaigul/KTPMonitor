Для того, чтобы использвать нижеописанные функции подключите файл "main_DB_modul.py"
Поля классов, которые используются в нижеописанных функциях можно посмотреть в файле models.py


Написать:

- редактирование профила ученика
- редактирование профила препода


Протестировать:

- вывести все контесты относящиеся к дивам (get_all_contests)


Протестированно:

- добавление ученика (add_new_pupil)
- добавление препода (add_new_teacher)
- добавление дива (add_new_div)
- добавление контеста (add_contest)
- добавление задач в контест (add_task)
- вывод учеников по дивам (get_all_pupil)
- вывести все дивы (get_all_divs)
- добавление новой посылки (add_new_send)
- изменение дивизиона ученика (change_pupil_div)
- удаление дивизиона (delete_div)
- вывод статистики контеста (get_statistic_contest)

Актуально:
1) get_all_divs()
2) add_new_pupil(user, lastname, firstname, secondname, CF, birthday, school, grade, phone)
3) add_new_teacher(user, lastname, firstname, secondname, CF, phone)
4) add_new_div(name) 
5) get_all_pupils(divs)
6) change_pupil_div(pupil, div)
7) delete_div(div)
8) add_contest(name, link, divs)
9) add_task(link, letter, name)
10) add_new_send(link, letter, cf, cnt_try, result)
11) get_all_teachers(divs)
12) get_statistic_contest(link)
13) get_all_contests(divs)
14) delete_contest(link)
15) get_statistic_pupil_contest(pupils, contests)

Описание:
1) Получить все дивизионы.

get_all_divs()

- не принимает параметров
- возвращает лист объектов модели(экземпляров класса) Div_Info в отсортированном алфавитном порядке по названию дивизиона.

it.name отражаются в web-приложении.
it.id дивизиона нужно для однозначности при смене дивизиона у ученика.

Пример вызова:

divs = get_all_divs()
for it in divs:
    print(it.name)

2) Добавить ученика в базу данных

add_new_pupil(user, lastname, firstname, secondname, CF, birthday, school, grade, phone)

- приминает параметры: объект модели User, которому будут соответствовать записанные данные, ФИО(3 аргумента), ник кф, 
	дата рождения в формате "yyyy.mm.dd", школа, класс, номер тлф
- возвращает True, если ученик успешно добавлен в БД, или False, если ученик с таким ником уже существует

Пример вызова:

add_new_pupil(user, "lastname", "firstname", "secondname", "CF", "2002.04.15", "школа 34", 10, "79112342323")

3) Добавить преподавателя в базу данных

add_new_teacher(user, lastname, firstname, secondname, CF, phone):

- приминает параметры: объект модели User, которому будут соответствовать записанные данные, ФИО(3 аргумента), ник кф, номер тлф
- - возвращает True, если преподаватель успешно добавлен в БД, или False, если преподаватель с таким ником уже существует

Пример вызова:

add_new_pupil(user, "lastname", "firstname", "secondname", "CF", "79112342323")



4) Добавляет новый дивизион в БД 
add_new_div(name) 

- добавляет новый дивизион в БД (для кнопки добавить дивизион)
- принимает параметр: имя дивизиона
- возвращает True, если объект создан или False, если дивизион с таким именем уже существует

Пример вимызова:

add_new_div("div A")


5) Вывод учеников относящихся к выбранным дивизионам

get_all_pupils(divs)


- принимает лист объектов модели Div_Info. 
- если нужны все дивизиона, то параметр не указывается
- возвращает лист объектов модели Pupil_Info.

Пример вызова:

divs = [{экзеспляр класса Div_Info}, {экзеспляр класса Div_Info}]
pupils = get_all_pupils(divs)


6) Изменить дивизион ученика

change_pupil_div(pupil, div)

- принимает параметры: экземпляр класса Pupil_Info, экземпляр класса Div_Info
- ничего не возвращает


7) Удалить дивизион

delete_div(div)

- Удаляет дивизион.
- Примимает парамерт: экземпляр класса Div_Info
- ничего не возвращает

Пример вызова:

delete_div(div)

8) Добавить контест в БД (без задач)

add_contest(name, link, divs)

- Добавляет контест в БД (без задач).
- Примимает параметры: название контеста, ссылка на контест, лист экземпляров класса Div_Info (дивы к которым относится контест)
- возвращает True, если контест добавлен впервые, или False, если контест уже был в БД.

9) Добавить задачи в контест

add_task(link, letter, name)

- Добавляет задачи в контест в БД.
- Примимает параметры: ссылка на контест, буква задачм, название задачи
- возвращает True, если задача добавлен впервые, или False, если задача уже был в БД.

10) Добавить новую посылк(у/и) для ученика и задачи

add_new_send(link, letter, cf, cnt_try, result)

- Добавляет информацию о посылках ученика по задаче в БД
- Примимает параметры: ссылка на контест, буква задачи, никмейм ученика, кол-во попыток, вердикт
- ничего не возвращает 

11) Вывести всех преподавателей

get_all_teachers(divs)

- принимает лист объектов модели Div_Info. 
- если нужны все дивизиона, то параметр не указывается
- возвращает лист объектов модели Teacher_Info.

12) Вывести статисктику по контесту

get_statistic_contest(link)

- принимает ссылку на контест. 
- возвращает словарь словарей, где внешний словарь - экземпляр класса задачи, внутренний словарь - экземпляр класса ученика, хранящий пару (кол-во попыток, вердикт)
- особенности:
	1) ученик появится в статистике, только если он сделал хотя бы одну посылку в контесте.
	2) значение result[task][pupil] может быть равно null, если ученик не делал посылок по этой задаче

пример вызова:

result = get_statistic_contest("link1")

for task in result:
    for pupil in result[task]:
        print("res[", task.letter, "][", pupil.CF, "] = ",  result[task][pupil], sep= ' ')
    print()


13) Вывод контестов относящихся к выбранным дивизионам

get_all_contests(divs)

- принимает лист объектов модели Div_Info. 
- если нужны все дивизионы, то параметр не указывается
- возвращает лист объектов модели Contest_Info.

Пример вызова:

divs = [{экзеспляр класса Div_Info}, {экзеспляр класса Div_Info}]
contests = get_all_contests(divs)
for c in contests:
      print(c.name)
      
14) Удалить контест

delete_contest(link)

- Удаляет контест.
- Примимает парамерт: ссылка на контест
- ничего не возвращает

Пример вызова:

delete_contest("cf/link")

15) Вывести статисктику по выбранным ученикам и контестам

get_statistic_pupil_contest(pupils, links)

- принимает лист экземпляров класса Pupil_Info и лист ссылок на контест. 
- возвращает словарь словарей, где внешний словарь - ссылка контеста, внутренний словарь - ник ученика, хранящий пару (кол-во сданных задач, всего задач)

пример вызова:

r = get_statistic_pupil_contest(pupils, contests)
for contest_link in r:
    for pupil_nick in r[contest_link]:
        print(r[contest_link][pupil_nick])


